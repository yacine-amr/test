library(rvest)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(stringi)
library(httr)
library(glue)
# Step 3: Data Processing :=============================================================================
df_data <- read.csv("scraped_data.csv")
df_data <- df_data[, -1]
#  Delete missing values ============================================================
df_data[, 5] <- ifelse(is.na(df_data[, 5]), "0", df_data[, 5])
df_data[, 7] <- ifelse(is.na(df_data[, 7]), "0", df_data[, 7])
# Change to Numeric values ==========================================================
df_data[, 5] <- stri_replace_all(df_data[,5],regex = ",", replace = "")%>%
as.numeric()
df_data[, 7] <- stri_replace_all(df_data[,7],regex = "%", replace = "")%>%
as.numeric()
df_data[, 8] <- stri_replace_all(df_data[,8],regex = ",", replace = "")%>%
as.numeric()
df_data[, 6] <- stri_replace_all(df_data[, 6], regex = "\\$|K|(?<=[0-9])\\.(?=[0-9])",replace = "")
df_data[, 6] <-  stri_replace_all(df_data[, 6], regex = "M", replace = "00")
df_data[, 6] <-  stri_replace_all(df_data[, 6], regex = ",",replace = ".")
df_data[, 6] <-  as.numeric(stri_extract(df_data[, 6], regex ="[0-9,]+"))*1000
df_data[, 10] <- stri_replace_all(df_data[, 10], regex = "\\$|K|(?<=[0-9])\\.(?=[0-9])",replace = "")
df_data[, 10] <-  stri_replace_all(df_data[, 10], regex = "M", replace = "00")
df_data[, 10] <-  stri_replace_all(df_data[, 10], regex = ",",replace = ".")
df_data[, 10] <-  as.numeric(stri_extract(df_data[, 10], regex ="[0-9,]+"))
df_data <- df_data[, -1]
# Check the class :
sapply(df_data, class)
df_data <- df_data[, -12]
View(df_data)
View(df_data)
# Step 3: Data Processing :=============================================================================
df_data <- read.csv("scraped_data.csv")
df_data <- df_data[, -1]
View(df_data)
View(df_data)
#  Delete missing values ============================================================
df_data[, 5] <- ifelse(is.na(df_data[, 5]), "0", df_data[, 5])
df_data[, 7] <- ifelse(is.na(df_data[, 7]), "0", df_data[, 7])
# Change to Numeric values ==========================================================
df_data[, 5] <- stri_replace_all(df_data[,5],regex = ",", replace = "")%>%
as.numeric()
df_data[, 7] <- stri_replace_all(df_data[,7],regex = "%", replace = "")%>%
as.numeric()
df_data[, 8] <- stri_replace_all(df_data[,8],regex = ",", replace = "")%>%
as.numeric()
df_data[, 6] <- stri_replace_all(df_data[, 6], regex = "\\$|K|(?<=[0-9])\\.(?=[0-9])",replace = "")
df_data[, 6] <-  stri_replace_all(df_data[, 6], regex = "M", replace = "00")
df_data[, 6] <-  stri_replace_all(df_data[, 6], regex = ",",replace = ".")
df_data[, 6] <-  as.numeric(stri_extract(df_data[, 6], regex ="[0-9,]+"))*1000
df_data[, 10] <- stri_replace_all(df_data[, 10], regex = "\\$|K|(?<=[0-9])\\.(?=[0-9])",replace = "")
df_data[, 10] <-  stri_replace_all(df_data[, 10], regex = "M", replace = "00")
df_data[, 10] <-  stri_replace_all(df_data[, 10], regex = ",",replace = ".")
df_data[, 10] <-  as.numeric(stri_extract(df_data[, 10], regex ="[0-9,]+"))
View(df_data)
# Step 3: Data Processing :=============================================================================
df_data <- read.csv("scraped_data.csv")
df_data <- df_data[, -1]
# Change to Numeric values ==========================================================
df_data[, 5] <- stri_replace_all(df_data[,5],regex = ",", replace = "")%>%
as.numeric()
df_data[, 7] <- stri_replace_all(df_data[,7],regex = "%", replace = "")%>%
as.numeric()
df_data[, 8] <- stri_replace_all(df_data[,8],regex = ",", replace = "")%>%
as.numeric()
View(df_data)
# Step 3: Data Processing :=============================================================================
df_data <- read.csv("scraped_data.csv")
df_data <- df_data[, -1]
View(df_data)
df_data[, 7] <- stri_replace_all(df_data[,7],regex = "%", replace = "")%>%
as.numeric()
View(df_data)
df_data <- read.csv("scraped_data.csv")
df_data <- df_data[, -1]
View(df_data)
df_data <- read.csv("scraped_data.csv")
View(df_data)
#  Delete missing values ============================================================
df_data[, 5] <- ifelse(is.na(df_data[, 5]), "0", df_data[, 5])
df_data[, 7] <- ifelse(is.na(df_data[, 7]), "0", df_data[, 7])
# Change to Numeric values ==========================================================
df_data[, 5] <- stri_replace_all(df_data[,5],regex = ",", replace = "")%>%
as.numeric()
df_data[, 7] <- stri_replace_all(df_data[,7],regex = "%", replace = "")%>%
as.numeric()
View(df_data)
# Step 3: Data Processing :=============================================================================
df_data <- read.csv("scraped_data.csv")
#  Delete missing values ============================================================
df_data[, 5] <- ifelse(is.na(df_data[, 5]), "0", df_data[, 5])
df_data[, 7] <- ifelse(is.na(df_data[, 7]), "0", df_data[, 7])
# Change to Numeric values ==========================================================
df_data[, 5] <- stri_replace_all(df_data[,5],regex = ",", replace = "")%>%
as.numeric()
df_data[, 7] <- stri_replace_all(df_data[,7],regex = "%", replace = "")%>%
as.numeric()
df_data[, 8] <- stri_replace_all(df_data[,8],regex = ",", replace = "")%>%
as.numeric()
df_data[, 6] <- stri_replace_all(df_data[, 6], regex = "\\$|K|(?<=[0-9])\\.(?=[0-9])",replace = "")
df_data[, 6] <-  stri_replace_all(df_data[, 6], regex = "M", replace = "00")
df_data[, 6] <-  stri_replace_all(df_data[, 6], regex = ",",replace = ".")
df_data[, 6] <-  as.numeric(stri_extract(df_data[, 6], regex ="[0-9,]+"))*1000
df_data[, 10] <- stri_replace_all(df_data[, 10], regex = "\\$|K|(?<=[0-9])\\.(?=[0-9])",replace = "")
df_data[, 10] <-  stri_replace_all(df_data[, 10], regex = "M", replace = "00")
df_data[, 10] <-  stri_replace_all(df_data[, 10], regex = ",",replace = ".")
df_data[, 10] <-  as.numeric(stri_extract(df_data[, 10], regex ="[0-9,]+"))
View(df_data)
df_data <- df_data[, -1]
View(df_data)
df_data <- df_data[, -11]
df_data <- df_data[, -12]
# Step 3: Data Processing :=============================================================================
df_data <- read.csv("scraped_data.csv")
#df_data <- df_data[, -1]
#  Delete missing values ============================================================
df_data[, 5] <- ifelse(is.na(df_data[, 5]), "0", df_data[, 5])
df_data[, 7] <- ifelse(is.na(df_data[, 7]), "0", df_data[, 7])
# Change to Numeric values ==========================================================
df_data[, 5] <- stri_replace_all(df_data[,5],regex = ",", replace = "")%>%
as.numeric()
df_data[, 7] <- stri_replace_all(df_data[,7],regex = "%", replace = "")%>%
as.numeric()
df_data[, 8] <- stri_replace_all(df_data[,8],regex = ",", replace = "")%>%
as.numeric()
df_data[, 6] <- stri_replace_all(df_data[, 6], regex = "\\$|K|(?<=[0-9])\\.(?=[0-9])",replace = "")
df_data[, 6] <-  stri_replace_all(df_data[, 6], regex = "M", replace = "00")
df_data[, 6] <-  stri_replace_all(df_data[, 6], regex = ",",replace = ".")
df_data[, 6] <-  as.numeric(stri_extract(df_data[, 6], regex ="[0-9,]+"))*1000
df_data[, 10] <- stri_replace_all(df_data[, 10], regex = "\\$|K|(?<=[0-9])\\.(?=[0-9])",replace = "")
df_data[, 10] <-  stri_replace_all(df_data[, 10], regex = "M", replace = "00")
df_data[, 10] <-  stri_replace_all(df_data[, 10], regex = ",",replace = ".")
df_data[, 10] <-  as.numeric(stri_extract(df_data[, 10], regex ="[0-9,]+"))
# Am deleting columns of  : URL, skills, scraping time:
#df_data <- df_data[, -11]
df_data <- df_data[, -12]
df_data <- df_data[, -1]
View(df_data)
# Step 3: Data Processing :=============================================================================
df_data <- read.csv("scraped_data.csv")
#df_data <- df_data[, -1]
View(df_data)
# Step 3: Data Processing :=============================================================================
df_data <- read.csv("scraped_data.csv")
#df_data <- df_data[, -1]
#  Delete missing values ============================================================
df_data[, 5] <- ifelse(is.na(df_data[, 5]), "0", df_data[, 5])
df_data[, 7] <- ifelse(is.na(df_data[, 7]), "0", df_data[, 7])
# Change to Numeric values ==========================================================
df_data[, 5] <- stri_replace_all(df_data[,5],regex = ",", replace = "")%>%
as.numeric()
df_data[, 7] <- stri_replace_all(df_data[,7],regex = "%", replace = "")%>%
as.numeric()
df_data[, 8] <- stri_replace_all(df_data[,8],regex = ",", replace = "")%>%
as.numeric()
df_data[, 6] <- stri_replace_all(df_data[, 6], regex = "\\$|K|(?<=[0-9])\\.(?=[0-9])",replace = "")
df_data[, 6] <-  stri_replace_all(df_data[, 6], regex = "M", replace = "00")
df_data[, 6] <-  stri_replace_all(df_data[, 6], regex = ",",replace = ".")
df_data[, 6] <-  as.numeric(stri_extract(df_data[, 6], regex ="[0-9,]+"))*1000
df_data[, 10] <- stri_replace_all(df_data[, 10], regex = "\\$|K|(?<=[0-9])\\.(?=[0-9])",replace = "")
df_data[, 10] <-  stri_replace_all(df_data[, 10], regex = "M", replace = "00")
df_data[, 10] <-  stri_replace_all(df_data[, 10], regex = ",",replace = ".")
df_data[, 10] <-  as.numeric(stri_extract(df_data[, 10], regex ="[0-9,]+"))
# Am deleting columns of  : URL, skills, scraping time:
df_data <- df_data[, -1]
#df_data <- df_data[, -11]
df_data <- df_data[, -12]
View(df_data)
# Save the cleaned data :
write.csv(df_data, "data_to_analyse.csv", row.names = FALSE)
# This data is Now Clean and Ready for Analysis:
df_data <- df_data <- read.csv("data_to_analyse.csv")
distinct_skills <- unique(df_data$top_skills)
distinct_skills
# Assuming 'data' is your dataset and 'skills' is the column name
column_data <- df_data$top_skills
# Split the strings
split_strings <- strsplit(column_data, " ")
# Flatten the list
flattened_strings <- unlist(split_strings)
# Get distinct strings
distinct_strings <- unique(flattened_strings)
distinct_strings
# Assuming 'data' is your dataset and 'skills' is the column name
column_data <- df_data$top_skills
# Split the strings
split_strings <- strsplit(column_data, " ")
# Flatten the list
flattened_strings <- unlist(split_strings)
# Count the occurrences of each skill
skill_counts <- table(flattened_strings)
# Sort the skill counts in descending order
sorted_skill_counts <- sort(skill_counts, decreasing = TRUE)
# Select the top 10 skills
top_10_skills <- head(sorted_skill_counts, 10)
# Convert the top 10 skills to a data frame for plotting
top_10_skills_df <- data.frame(Skill = names(top_10_skills), Frequency = as.numeric(top_10_skills))
# Plot the bar plot
library(ggplot2)
ggplot(top_10_skills_df, aes(x = Skill, y = Frequency)) +
geom_bar(stat = "identity") +
xlab("Skills") +
ylab("Frequency") +
ggtitle("Top 10 Most Repeated Skills")
# Assuming 'data' is your dataset and 'skills' is the column name
column_data <- df_data$top_skills
# Split the strings
split_strings <- strsplit(column_data, " ")
# Flatten the list
flattened_strings <- unlist(split_strings)
# Create your own skill list
skills_list <- c("SQL", "MATLAB", "Power BI", "Excel", "Python", "Tableau", "R", "Java", "JavaScript")
# Filter the flattened strings based on your skill list
filtered_strings <- flattened_strings[flattened_strings %in% skills_list]
# Count the occurrences of each skill in the filtered strings
skill_counts <- table(filtered_strings)
# Sort the skill counts in descending order
sorted_skill_counts <- sort(skill_counts, decreasing = TRUE)
# Convert the skill counts to a data frame for plotting
skill_counts_df <- data.frame(Skill = names(sorted_skill_counts), Frequency = as.numeric(sorted_skill_counts))
# Plot the bar plot
library(ggplot2)
ggplot(skill_counts_df, aes(x = Skill, y = Frequency)) +
geom_bar(stat = "identity") +
xlab("Skills") +
ylab("Frequency") +
ggtitle("Frequency of My Skills")
skill_counts
# Assuming 'data' is your dataset and 'skills' is the column name
column_data <- df_data$top_skills
# Split the strings
split_strings <- strsplit(column_data, " ")
split_strings
# Flatten the list
flattened_strings <- unlist(split_strings)
flattened_strings
Create your own skill list
# Filter the flattened strings based on your skill list
filtered_strings <- flattened_strings[flattened_strings %in% skills_list]
filtered_strings
flattened_strings
# Filter the flattened strings based on your skill list
filtered_strings <- intersect(unlist(split_strings), skills_list)
filtered_strings
View(df_data)
# Assuming 'data' is your original dataset and 'skills' is the column name
skills_column <- df_data$top_skills
# Split the skills column and create a new dataframe with split skills
split_skills <- data.frame(SplitSkills = unlist(strsplit(skills_column, " ")))
# Save the split skills into a different table
write.csv(split_skills, file = "split_skills_table.csv", row.names = FALSE)
View(split_skills)
library(stringr)
# Assuming 'data' is your dataset and 'skills' is the column name
skills_column <- df_data$top_skills
# Create your custom skills list
custom_skills <- c("SQL", "R", "Python", "Excel","Tableau", "MATLAB", "Power BI")
# Initialize a frequency count
frequency_count <- rep(0, length(custom_skills))
# Loop through each custom skill
for (i in 1:length(custom_skills)) {
# Count the occurrences of the custom skill, even if attached to other words
frequency_count[i] <- sum(str_detect(skills_column, fixed(custom_skills[i])))
}
# Create a data frame with custom skills and their frequencies
frequency_data <- data.frame(Skill = custom_skills, Frequency = frequency_count)
# Sort the data frame in descending order of frequency
sorted_frequency_data <- frequency_data[order(frequency_data$Frequency, decreasing = TRUE), ]
# Loop through each custom skill
for (i in 1:length(custom_skills)) {
# Count the occurrences of the custom skill, even if attached to other words
frequency_count[i] <- sum(str_detect(skills_column, fixed(custom_skills[i])))
}
sorted_frequency_data
library(stringr)
# Assuming 'data' is your dataset and 'skills' is the column name
skills_column <- df_data$top_skills
# Create your custom skills list
custom_skills <- c("SQL", "R", "Python", "Excel","Tableau", "MATLAB", "Power BI", "JavaScript", "Java")
# Initialize a frequency count
frequency_count <- rep(0, length(custom_skills))
# Loop through each custom skill
for (i in 1:length(custom_skills)) {
# Count the occurrences of the custom skill, even if attached to other words
frequency_count[i] <- sum(str_detect(skills_column, fixed(custom_skills[i])))
}
# Create a data frame with custom skills and their frequencies
frequency_data <- data.frame(Skill = custom_skills, Frequency = frequency_count)
# Sort the data frame in descending order of frequency
sorted_frequency_data <- frequency_data[order(frequency_data$Frequency, decreasing = TRUE), ]
sorted_frequency_data
library(stringr)
# Assuming 'data' is your dataset and 'skills' is the column name
skills_column <- df_data$top_skills
# Create your custom skills list
custom_skills <- c("SQL", "R", "Python", "Excel","Tableau", "MATLAB", "Power BI")
# Initialize a frequency count
frequency_count <- rep(0, length(custom_skills))
# Loop through each custom skill
for (i in 1:length(custom_skills)) {
# Count the occurrences of the custom skill, even if attached to other words
frequency_count[i] <- sum(str_detect(skills_column, fixed(custom_skills[i])))
}
# Create a data frame with custom skills and their frequencies
frequency_data <- data.frame(Skill = custom_skills, Frequency = frequency_count)
# Sort the data frame in descending order of frequency
sorted_frequency_data <- frequency_data[order(frequency_data$Frequency, decreasing = TRUE), ]
sorted_frequency_data
library(stringr)
# Assuming 'data' is your dataset and 'skills' is the column name
skills_column <-  df_data$top_skills
# Create your custom skills list
custom_skills <- c("SQL", "R", "Python", "Excel","Tableau", "MATLAB", "Power BI")
# Initialize a frequency count
frequency_count <- rep(0, length(custom_skills))
# Loop through each custom skill
for (i in 1:length(custom_skills)) {
# Check if the skill is present in any cell
has_skill <- str_detect(skills_column, fixed(custom_skills[i]))
# Count the number of cells with the skill
num_cells_with_skill <- sum(has_skill)
# Adjust the count if the skill appears multiple times within a single cell
if (num_cells_with_skill > 0) {
has_skill_multiple_times <- str_detect(skills_column[has_skill], paste0("\\b", custom_skills[i], "\\b"))
frequency_count[i] <- sum(has_skill_multiple_times)
}
}
# Create a data frame with custom skills and their frequencies
frequency_data <- data.frame(Skill = custom_skills, Frequency = frequency_count)
# Sort the data frame in descending order of frequency
sorted_frequency_data <- frequency_data[order(frequency_data$Frequency, decreasing = TRUE), ]
sorted_frequency_data
